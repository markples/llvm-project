<Project>
  <Import Project="Directory.Build.props" />
  <Import Project="Directory.Build.targets" />

  <PropertyGroup>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' and '$(BuildOS)' != 'Windows_NT'">Unix Makefiles</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' and '$(BuildOS)' == 'Windows_NT'">Ninja</CMakeGenerator>
    <_VCVarsScriptName Condition="'$(BuildOS)' == 'Windows_NT'">vcvars64.bat</_VCVarsScriptName>
    <_VCVarsScriptName Condition="'$(BuildOS)' == 'Windows_NT' and '$(TargetArchitecture)' == 'arm64'">vcvarsamd64_arm64.bat</_VCVarsScriptName>
    <_VCVarsScriptName Condition="'$(BuildOS)' == 'Windows_NT' and '$(TargetArchitecture)' == 'arm'">vcvarsamd64_arm.bat</_VCVarsScriptName>
    <_SetupEnvironment Condition="'$(BuildOS)' == 'Windows_NT'">
    :: VisualStudio includes vswhere.exe that can be used to locate current VisualStudio installation.
    set VSWHERE_TOOLS_BIN=%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe
    set VS_VCINSTALL_DIR=

    :: Try to locate installed VisualStudio VC environment.
    if "%VCINSTALLDIR%" == "" if exist "%VSWHERE_TOOLS_BIN%" (
        for /f "tokens=*" %%a in ('"%VSWHERE_TOOLS_BIN%" -latest -prerelease -property installationPath') do (
            set VS_VCINSTALL_DIR=%%a\VC\
        )
    )

    if NOT "%VCINSTALLDIR%" == "" set VS_VCINSTALL_DIR=%VCINSTALLDIR%

    :: Run VS build environment script.
    call "%VS_VCINSTALL_DIR%\Auxiliary\Build\$(_VCVarsScriptName)"

    </_SetupEnvironment>
    <_CMakeConfigureCommand>$(_SetupEnvironment) cmake $(_LLVMSourceDir) -G "$(CMakeGenerator)" @(_LLVMBuildArgs->'%(Identity)',' ')</_CMakeConfigureCommand>
    <_BuildSubset Condition="'$(BuildLLVMTableGenOnly)' == 'true'">llvm-tblgen clang-tblgen</_BuildSubset>
    <_BuildSubset Condition="'$(BuildObjWriterOnly)' == 'true'">objwriter llvm-mca llvm-dwarfdump FileCheck</_BuildSubset>
    <_BuildCommand Condition="'$(CMakeGenerator)' == 'Unix Makefiles'">$(_SetupEnvironment) make $(_BuildSubset) -j$([System.Environment]::ProcessorCount)</_BuildCommand>
    <_BuildCommand Condition="'$(CMakeGenerator)' == 'Ninja'">$(_SetupEnvironment) ninja $(_BuildSubset)</_BuildCommand>
    <_CMakeInstallCommand Condition="'$(BuildObjWriterOnly)' == 'true'">
    $(_SetupEnvironment) 

    cmake -DCMAKE_INSTALL_DO_STRIP=1 -DCMAKE_INSTALL_PREFIX=$(_LLVMInstallDir) -DCMAKE_INSTALL_COMPONENT=objwriter -P cmake_install.cmake
    cmake -DCMAKE_INSTALL_DO_STRIP=1 -DCMAKE_INSTALL_PREFIX=$(_LLVMInstallDir) -DCMAKE_INSTALL_COMPONENT=llvm-mca -P cmake_install.cmake
    cmake -DCMAKE_INSTALL_DO_STRIP=1 -DCMAKE_INSTALL_PREFIX=$(_LLVMInstallDir) -DCMAKE_INSTALL_COMPONENT=llvm-dwarfdump -P cmake_install.cmake
    cmake -DCMAKE_INSTALL_DO_STRIP=1 -DCMAKE_INSTALL_PREFIX=$(_LLVMInstallDir) -DCMAKE_INSTALL_COMPONENT=FileCheck -P cmake_install.cmake
    </_CMakeInstallCommand>
    <_CMakeInstallCommand Condition="'$(BuildObjWriterOnly)' != 'true'">$(_SetupEnvironment) cmake -DCMAKE_INSTALL_DO_STRIP=1 -DCMAKE_INSTALL_PREFIX=$(_LLVMInstallDir) -P cmake_install.cmake</_CMakeInstallCommand>
  </PropertyGroup>

  <PropertyGroup Condition="'$(ForceDevtoolset7)' == 'true'">
    <DevtoolsetRoot>/opt/rh/devtoolset-7/root</DevtoolsetRoot>
    <Devtoolset7LinkFlag>-L$(DevtoolsetRoot)/usr/lib/gcc/x86_64-redhat-linux/7/</Devtoolset7LinkFlag>
    <Devtoolset7CompileFlag>--gcc-toolchain=$(DevtoolsetRoot)/usr/lib/gcc/x86_64-redhat-linux/7/ -I$(DevtoolsetRoot)/usr/include/c++/7/ -I$(DevtoolsetRoot)/usr/include/c++/7/x86_64-redhat-linux/ -B$(DevtoolsetRoot)/usr/lib/gcc/x86_64-redhat-linux/7/</Devtoolset7CompileFlag>
  </PropertyGroup>

  <ItemGroup>
    <_LLVMBuildArgs Condition="'$(TargetArchitecture)' == 'arm64'" Include="-DLLVM_TARGET_ARCH=AARCH64" />
    <_LLVMBuildArgs Condition="'$(TargetArchitecture)' == 'arm'" Include="-DLLVM_TARGET_ARCH=ARM" />
    <_LLVMBuildArgs Condition="'$(TargetArchitecture)' == 'arm64' and '$(BuildOS)' == 'Windows_NT'" Include="-DLLVM_DEFAULT_TARGET_TRIPLE=aarch64-windows-msvc" />
    <_LLVMBuildArgs Condition="'$(TargetArchitecture)' == 'arm' and '$(BuildOS)' == 'Windows_NT'" Include="-DLLVM_DEFAULT_TARGET_TRIPLE=arm-windows-msvc" />
    <_LLVMBuildArgs Condition="'$(ClangTarget)' != '' and '$(BuildOS)' == 'Linux'" Include="-DLLVM_DEFAULT_TARGET_TRIPLE=$(ClangTarget)" />
    <_LLVMBuildArgs Condition="'$(ClangTarget)' != '' and '$(BuildOS)' == 'Linux'" Include="-DCMAKE_OBJCOPY=/usr/bin/$(ClangTarget)-objcopy" />
    <_LLVMBuildArgs Condition="'$(ClangTarget)' != '' and '$(BuildOS)' == 'Linux'" Include="-DCMAKE_STRIP=/usr/bin/$(ClangTarget)-strip" />
    <_LLVMBuildArgs Condition="'$(TargetArchitecture)' == 'arm64' and '$(BuildOS)' == 'OSX'" Include="-DLLVM_DEFAULT_TARGET_TRIPLE=arm64-apple-darwin" />
    <_LLVMBuildArgs Condition="'$(TargetArchitecture)' == 'arm64' and '$(BuildOS)' == 'OSX'" Include="-DCMAKE_OSX_ARCHITECTURES=arm64"/>
    <!-- Enable CMake cross-compilation support by setting CMAKE_SYSTEM_NAME manually, see https://github.com/llvm/llvm-project/issues/52819 -->
    <_LLVMBuildArgs Condition="('$(TargetArchitecture)' == 'arm' or '$(TargetArchitecture)' == 'arm64') and '$(BuildOS)' == 'Windows_NT'" Include="-DCMAKE_SYSTEM_NAME=Windows" />
    <_LLVMBuildArgs Condition="('$(TargetArchitecture)' == 'arm' or '$(TargetArchitecture)' == 'arm64') and '$(BuildOS)' == 'Linux'" Include="-DCMAKE_SYSTEM_NAME=Linux" />
    <_LLVMBuildArgs Condition="'$(LLVMTableGenPath)' != ''" Include='-DLLVM_TABLEGEN="$(LLVMTableGenPath)"' />
    <_LLVMBuildArgs Condition="'$(ClangTableGenPath)' != ''" Include='-DCLANG_TABLEGEN="$(ClangTableGenPath)"' />
    <_LLVMBuildArgs Include="-DCMAKE_BUILD_TYPE=Release" />
    <_LLVMBuildArgs Include='-DLEGAL_COPYRIGHT="\xa9 Microsoft Corporation. All rights reserved."' />
    <_LLVMBuildArgs Include="-DLLVM_BUILD_LLVM_C_DYLIB=OFF" />
    <_LLVMBuildArgs Include="-DLLVM_ENABLE_DIA_SDK=OFF" />
    <_LLVMBuildArgs Include="-DLLVM_INCLUDE_TESTS=OFF" />
    <_LLVMBuildArgs Include='-DLLVM_TARGETS_TO_BUILD="X86%3BAArch64%3BARM"' />
    <_LLVMBuildArgs Include='-DLLVM_BUILD_TESTS=OFF' />
    <_LLVMBuildArgs Include='-DLLVM_BUILD_EXAMPLES=OFF' />
    <_LLVMBuildArgs Include='-DLLVM_INCLUDE_EXAMPLES=OFF' />
    <_LLVMBuildArgs Include='-DLLVM_TOOLS_TO_BUILD="opt%3Bllc%3Bllvm-config%3Bllvm-dis%3Bllvm-mc%3Bllvm-as%3Bobjwriter%3Bllvm-mca%3Bllvm-dwarfdump%3BFileCheck"' />
    <_LLVMBuildArgs Include='-DLLVM_ENABLE_LIBXML2=OFF' />
    <_LLVMBuildArgs Include='-DLLVM_ENABLE_TERMINFO=OFF' />
    <_LLVMBuildArgs Include='-DLLVM_EXTERNALIZE_DEBUGINFO=ON' />
    <_LLVMBuildArgs Include='-DLLVM_EXTERNALIZE_DEBUGINFO_INSTALL=ON' />
    <_LLVMBuildArgs Include='-DLLVM_ENABLE_PDB=ON' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Linux'" Include='-DLLVM_EXTERNALIZE_DEBUGINFO_EXTENSION=dbg' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'OSX'" Include='-DLLVM_EXTERNALIZE_DEBUGINFO_EXTENSION=dwarf -DLLVM_EXTERNALIZE_DEBUGINFO_FLATTEN=ON' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Windows_NT' and '$(Configuration)' == 'Release'" Include='-DLLVM_USE_CRT_DEBUG=MT' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Windows_NT' and '$(Configuration)' == 'Release'" Include='-DLLVM_USE_CRT_RELEASE=MT' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Windows_NT' and '$(Configuration)' == 'Debug'" Include='-DLLVM_USE_CRT_DEBUG=MTd' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Windows_NT' and '$(Configuration)' == 'Debug'" Include='-DLLVM_USE_CRT_RELEASE=MTd' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Windows_NT'" Include='-DLLVM_ENABLE_ZLIB=OFF' />
  </ItemGroup>

  <ItemGroup>
    <_LLVMBuildArgs Include='-DLLVM_ENABLE_PROJECTS=clang' />
    <_LLVMBuildArgs Include='-DLLVM_BUILD_TOOLS:BOOL=ON' />
    <_LLVMBuildArgs Include='-DLLVM_INSTALL_UTILS:BOOL=ON' />
    <_LLVMBuildArgs Include="-DLLVM_INCLUDE_UTILS:BOOL=ON" />
    <_LLVMBuildArgs Include='-DCLANG_BUILD_TOOLS=OFF' />
    <_LLVMBuildArgs Include='-DCLANG_INCLUDE_TESTS=OFF' />
    <_LLVMBuildArgs Include='-DCLANG_ENABLE_ARCMT=OFF' />
    <_LLVMBuildArgs Include='-DCLANG_ENABLE_STATIC_ANALYZER=OFF' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Linux'" Include='-DCMAKE_SHARED_LINKER_FLAGS="$(Devtoolset7LinkFlag) -Wl,--build-id"' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Linux'" Include='-DCMAKE_MODULE_LINKER_FLAGS="$(Devtoolset7LinkFlag) -Wl,--build-id"' />
  </ItemGroup>

  <PropertyGroup Condition="'$(BuildOS)' != 'Windows_NT'">
    <_CrossCFlags Condition="'$(BuildOS)' == 'Linux' and '$(ClangTarget)' != ''">--target=$(ClangTarget) --sysroot=$(ROOTFS_DIR)</_CrossCFlags>
    <_CrossCFlags Condition="'$(BuildOS)' == 'OSX' and '$(TargetArchitecture)' == 'arm64'">--target=aarch64-apple-darwin</_CrossCFlags>
    <_ExeLinkerFlags>$(_CrossCFlags)</_ExeLinkerFlags>
    <_ExeLinkerFlags Condition="'$(BuildOS)' == 'Linux'">-Wl,--build-id $(_ExeLinkerFlags)</_ExeLinkerFlags>
    <_SharedLinkerFlags>$(_CrossCFlags)</_SharedLinkerFlags>
    <_SharedLinkerFlags Condition="'$(BuildOS)' == 'Linux'">-Wl,--build-id $(_SharedLinkerFlags)</_SharedLinkerFlags>
  </PropertyGroup>

  <ItemGroup Condition="'$(BuildOS)' != 'Windows_NT' and ('$(TargetArchitecture)' == 'arm' or '$(TargetArchitecture)' == 'arm64')">
    <_LLVMBuildArgs Include='-DCMAKE_MODULE_LINKER_FLAGS="$(_CrossCFlags)"' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Linux'" Include="-DCMAKE_C_COMPILER=$(ClangVersion)" />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'Linux'" Include="-DCMAKE_CXX_COMPILER=$(ClangPlusVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(BuildOS)' != 'Windows_NT'">
    <_LLVMBuildArgs Include='-DCMAKE_C_FLAGS="-I../llvm/include -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -DNDEBUG -D__NO_CTYPE_INLINE -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS $(_CrossCFlags)"' />
    <_LLVMBuildArgs Include='-DCMAKE_CXX_FLAGS="-I../llvm/include $(Devtoolset7CompileFlag) -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -DNDEBUG -D__NO_CTYPE_INLINE -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS $(_CrossCFlags) "' />
    <_LLVMBuildArgs Include='-DCMAKE_EXE_LINKER_FLAGS="$(Devtoolset7LinkFlag) $(_ExeLinkerFlags)"' />
    <_LLVMBuildArgs Include='-DCMAKE_SHARED_LINKER_FLAGS="$(Devtoolset7LinkFlag) $(_SharedLinkerFlags)"' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'OSX' and '$(TargetArchitecture)' == 'arm64'" Include='-DCMAKE_OSX_DEPLOYMENT_TARGET=11.0' />
    <_LLVMBuildArgs Condition="'$(BuildOS)' == 'OSX' and '$(TargetArchitecture)' == 'x64'" Include='-DCMAKE_OSX_DEPLOYMENT_TARGET=10.13' />
  </ItemGroup>

  <Target Name="_LLVMBeforeBuild">
    <MakeDir Directories="$(_LLVMBuildDir)" Condition="!Exists('$(_LLVMBuildDir)')" />
  </Target>

  <Target Name="_LLVMBuild">
    <Exec WorkingDirectory="$(_LLVMBuildDir)"
          Command="$(_CMakeConfigureCommand)"
          Condition="!Exists('$(_LLVMBuildDir)/CMakeCache.txt')"
          IgnoreStandardErrorWarningFormat="true" />
    <Exec WorkingDirectory="$(_LLVMBuildDir)"
          Command="$(_BuildCommand)"
          IgnoreStandardErrorWarningFormat="true" />
    <Exec WorkingDirectory="$(_LLVMBuildDir)"
          Command="$(_CMakeInstallCommand)"
          IgnoreStandardErrorWarningFormat="true"
          Condition="'$(BuildLLVMTableGenOnly)' != 'true'" />
  </Target>

  <Target Name="_LLVMAfterBuild" Condition="'$(BuildLLVMTableGenOnly)' != 'true'">
    <RemoveDir Directories="$(_LLVMInstallDir)/share" />
    <ItemGroup>
      <FilesToDelete Include="$(_LLVMInstallDir)/lib/libLTO*" />
      <FilesToDelete Include="$(_LLVMInstallDir)/lib/LLVMHello*" />
      <FilesToDelete Include="$(_LLVMInstallDir)/lib/BugpointPasses.*" />
      <FilesToDelete Include="$(_LLVMInstallDir)/lib/clang*" />
      <FilesToDelete Include="$(_LLVMInstallDir)/bin/clang-*" />
    </ItemGroup>
    <Delete Files="@(FilesToDelete)" ContinueOnError="true" TreatErrorsAsWarnings="true" />
  </Target>

  <Target Name="Build" DependsOnTargets="_LLVMBeforeBuild;_LLVMBuild;_LLVMAfterBuild" />
  <Target Name="Restore" />
  <Target Name="Test" />
  <Target Name="Pack" DependsOnTargets="Build">
    <MSBuild Projects="nuget/packages.builds" Targets="Build" />
  </Target>
</Project>
